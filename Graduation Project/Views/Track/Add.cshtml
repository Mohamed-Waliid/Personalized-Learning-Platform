@model TrackViewModel

@{
    ViewData["Title"] = "Add Track";
    Layout = "~/Views/Shared/_Layout_form.cshtml";
}

<div class="form-container">
    <h2>Add New Track</h2>
    <p>Fill in the track information below</p>

    <form asp-action="SaveAdd" method="post" enctype="multipart/form-data">
        <div class="form-group">
            <label asp-for="Name" class="form-label">Track Title</label>
            <input asp-for="Name" class="form-control" />
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Description" class="form-label">Description</label>
            <textarea asp-for="Description" class="form-control"></textarea>
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="TrackImageFile" class="form-label">Upload Track Image</label>
            <input type="file" asp-for="TrackImageFile" class="form-control" accept="image/*" />
            <span asp-validation-for="TrackImageFile" class="text-danger"></span>
        </div>

        <button type="submit" class="btn btn-submit">Create Track</button>
        <a asp-action="ShowAll" class="btn btn-secondary">Cancel</a>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const originalSelect = document.querySelector('select[name="DifficultyLevel"]');
            const customSelect = document.getElementById('difficultySelect');
            const customSelectTrigger = customSelect.querySelector('.custom-select-trigger');
            const customOptions = customSelect.querySelector('.custom-options');
            const hiddenInput = document.getElementById('DifficultyLevel');
            const customOptionItems = customSelect.querySelectorAll('.custom-option');

            if (originalSelect.value) {
                const selectedOption = originalSelect.querySelector(`option[value="${originalSelect.value}"]`);
                if (selectedOption) {
                    customSelectTrigger.textContent = selectedOption.textContent;
                }
            }

            customSelectTrigger.addEventListener('click', function (e) {
                e.stopPropagation();
                customSelect.classList.toggle('open');
            });

            customOptionItems.forEach(option => {
                option.addEventListener('click', function () {
                    customOptionItems.forEach(opt => opt.classList.remove('selected'));
                    this.classList.add('selected');
                    customSelectTrigger.textContent = this.textContent;
                    hiddenInput.value = this.getAttribute('data-value');
                    originalSelect.value = this.getAttribute('data-value');
                    customSelect.classList.remove('open');
                });
            });

            document.addEventListener('click', function () {
                customSelect.classList.remove('open');
            });

            customOptions.addEventListener('click', function (e) {
                e.stopPropagation();
            });
        });
    </script>
}